# -*- coding: utf-8 -*-
"""Human-detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17S5sri48uMeezM-Nef7TLp7MjMUMPR_t
"""

import glob
x = glob.glob('/content/drive/MyDrive/Assignments/Human_Detection/0/*')

y = glob.glob('/content/drive/MyDrive/Assignments/Human_Detection/1/*')

from keras.preprocessing import image

len(x)

len(y)

import numpy as np
import pandas as pd
from numpy import asarray

img = []
label = []

for i in range(len(x)):
    img0 = image.load_img(x[i], target_size=(128,128,1))
    img0 = image.img_to_array(img0)
    img.append(img0)
    l = 0
    label.append(l)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

from PIL import Image

for i in range(len(y)):
    img1 = image.load_img(y[i], target_size=(128,128,1))
    img1 = image.img_to_array(img1)
    img.append(img1)
    l1 = 1
    label.append(l1)

len(img)

len(label)

img = asarray(img)
label = asarray(label)

img.shape

img = img/255

img.shape

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(img, label, test_size=0.33)

from tensorflow import keras
from keras import layers
from tensorflow.keras.layers.experimental import preprocessing

from keras.layers.normalization.batch_normalization import BatchNormalization
model = keras.Sequential([
    # Preprocessing
    preprocessing.RandomFlip('horizontal'), # flip left-to-right
    preprocessing.RandomContrast(0.5), # contrast change by up to 50%
    # first Convolutional Block
    layers.Conv2D(32,(3,3),activation='relu', input_shape=(128,128,1)),
    layers.Conv2D(32,(3,3),activation='relu'),
    layers.MaxPooling2D(pool_size=(2,2)),
    layers.BatchNormalization(),
    layers.Dropout(0.5),
    layers.Flatten(), 
    layers.Dense(128,activation='relu'),
    layers.Dropout(0.5),
    layers.BatchNormalization(),
    layers.Dense(1,activation = 'sigmoid')
])

from keras import layers, callbacks

early_stopping = callbacks.EarlyStopping(
    min_delta=0.001, # minimium amount of change to count as an improvement
    patience=10, # how many epochs to wait before stopping
    restore_best_weights=True,
)

model.compile(
    optimizer='adam',
    loss='binary_crossentropy',
    metrics=['accuracy'],
)

model.fit(
    X_train, y_train,
    validation_data = (X_test, y_test),
    epochs = 20,
    callbacks=[early_stopping],
)

test = glob.glob('/content/drive/MyDrive/Assignments/Human_Detection/test/*')

img_1 = []

for i in range(len(test)):
    img2 = image.load_img(test[i], target_size=(128,128,1))
    img2 = image.img_to_array(img2)
    img_1.append(img2)

img_1 = asarray(img_1)

img_1 = img_1/255

model.predict(img_1)

h_noh = model.predict(img_1)

for i in range(len(img_1)):
    if h_noh[i][0]>=0.5:
        plt.matshow(img_1[i])
        prediction='Human'
    else:
        plt.matshow(img_1[i])
        prediction='Non-Human'
    print(prediction)

